services:

  # Note: จะต้องกำหนด ชื่อ Service ต้องไม่มี Underscore (_) เพราะจะมีผลกับการ Mapping Host Name ด้วยชื่อ Service ของ SpringBoot
  backend-api-s1: 
    container_name: "SpringBackendService1"
    image: openjdk:21-slim
    volumes:
      - ../springboot/services/jar:/service/api
    environment:
      # ตั้งชื่อนี้เอาไว้ เพื่อใช้ในการทดสอบการทำงานของ Load balance (Round-Robin), 
      # API จะอ่านค่า System Environment ชื่อ DOCKER_HOST_NAME เพื่อตอบกลับมา
      # มีการเรียกใช้จาก เครื่องไหน
      - DOCKER_HOST_NAME=backend_api_s1
    ports:
      - 8001:8003
    command: ["java", "-jar", "/service/api/krakend-api-0.0.1.jar"]
    networks:
      - krakend-network

  # Note: จะต้องกำหนด ชื่อ Service ต้องไม่มี Underscore (_) เพราะจะมีผลกับการ Mapping Host Name ด้วยชื่อ Service ของ SpringBoot
  backend-api-s2:
    container_name: "SpringBackendService2"
    image: openjdk:21-slim
    volumes:
      - ../springboot/services/jar:/service/api
    environment:
      # ตั้งชื่อนี้เอาไว้ เพื่อใช้ในการทดสอบการทำงานของ Load balance (Round-Robin), 
      # API จะอ่านค่า System Environment ชื่อ DOCKER_HOST_NAME เพื่อตอบกลับมา
      # มีการเรียกใช้จาก เครื่องไหน
      - DOCKER_HOST_NAME=backend_api_s2
    ports:
      - 8002:8003
    command: ["java", "-jar", "/service/api/krakend-api-0.0.1.jar"]
    networks:
      - krakend-network

  # Note: จะต้องกำหนด ชื่อ Service ต้องไม่มี Underscore (_) เพราะจะมีผลกับการ Mapping Host Name ด้วยชื่อ Service ของ SpringBoot
  backend-api-s3:
    container_name: "SpringBackendService3"
    image: openjdk:21-slim
    volumes:
      - ../springboot/services/jar:/service/api
    environment:
      # ตั้งชื่อนี้เอาไว้ เพื่อใช้ในการทดสอบการทำงานของ Load balance (Round-Robin), 
      # API จะอ่านค่า System Environment ชื่อ DOCKER_HOST_NAME เพื่อตอบกลับมา
      # มีการเรียกใช้จาก เครื่องไหน
      - DOCKER_HOST_NAME=backend_api_s3
    ports:
      - 8003:8003
    command: ["java", "-jar", "/service/api/krakend-api-0.0.1.jar"]
    networks:
      - krakend-network


  krakend:
    container_name: "krakend-2.9.4"
    image: krakend:2.9.4
    volumes:
      - ../configs/krakend:/etc/krakend
    ports:
      # Port ของ krakend api gateway, http://localhost:8080/api/v1/
      - "8080:8080"

      # Port ของ Matrics API ที่ Export ข้อมูล Metrics เพื่อไปเก็บไว้ใน InfluxDB, http://localhost:8090/__stats
      # Config จะอยู่ใน ./configs/krakend/krakend.json {"elemetry/metrics": {"telemetry/metrics": {...}}}
      - "8090:8090"

      - "9091:9091"
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    networks:
      - krakend-network
    depends_on:
      - backend-api-s1
      - backend-api-s2
      - backend-api-s3

  krakend-nocors:
    container_name: "KrakendDisableCors"
    image: krakend:2.9.4
    volumes:
      - ../configs/krakend-disable-cors:/etc/krakend
    ports:
      - 8085:8085
    command: ["run", "-d", "-c", "/etc/krakend/krakend.json"]
    networks:
      - krakend-network
    depends_on:
      - backend-api-s1
      - backend-api-s2
      - backend-api-s3
  

  prometheus:
    container_name: "prometheus"
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - "./telemetry-dashboards/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml"
    networks:
      - krakend-network

  grafana:
    container_name: "grafana"
    image: grafana/grafana:latest
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: krakend
      GF_SECURITY_ADMIN_PASSWORD: krakend
      GF_AUT_ANONYMOUS_ENABLED: "true"
    volumes:
      - "./telemetry-dashboards/grafana/datasources/prometheus-tempo.yml:/etc/grafana/provisioning/datasources/prometheus-tempo.yml"
      - "./telemetry-dashboards/grafana/krakend/for-prometheus.json:/var/lib/grafana/dashboards/krakend/for-prometheus.json"
      - "./telemetry-dashboards/grafana/dashboards/all.yml:/etc/grafana/provisioning/dashboards/all.yml"
    networks:
      - krakend-network

networks:
  krakend-network:
    driver: bridge
  